// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: items.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const listByFeed = `-- name: ListByFeed :many
SELECT i.id,
       i.feed_id,
       f.title AS feed_title,
       i.guid,
       i.url,
       i.title,
       i.author,
       i.content_html,
       i.content_text,
       i.published_at,
       i.retrieved_at
FROM items i
JOIN feeds f ON f.id = i.feed_id
WHERE i.feed_id = $1
ORDER BY i.published_at DESC NULLS LAST, i.retrieved_at DESC
LIMIT $2 OFFSET $3
`

type ListByFeedParams struct {
	FeedID uuid.UUID
	Limit  int32
	Offset int32
}

type ListByFeedRow struct {
	ID          uuid.UUID
	FeedID      uuid.UUID
	FeedTitle   string
	Guid        sql.NullString
	Url         string
	Title       string
	Author      sql.NullString
	ContentHtml string
	ContentText string
	PublishedAt sql.NullTime
	RetrievedAt time.Time
}

func (q *Queries) ListByFeed(ctx context.Context, arg ListByFeedParams) ([]ListByFeedRow, error) {
	rows, err := q.db.QueryContext(ctx, listByFeed, arg.FeedID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListByFeedRow{}
	for rows.Next() {
		var i ListByFeedRow
		if err := rows.Scan(
			&i.ID,
			&i.FeedID,
			&i.FeedTitle,
			&i.Guid,
			&i.Url,
			&i.Title,
			&i.Author,
			&i.ContentHtml,
			&i.ContentText,
			&i.PublishedAt,
			&i.RetrievedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecent = `-- name: ListRecent :many
SELECT i.id,
       i.feed_id,
       f.title AS feed_title,
       i.guid,
       i.url,
       i.title,
       i.author,
       i.content_html,
       i.content_text,
       i.published_at,
       i.retrieved_at
FROM items i
JOIN feeds f ON f.id = i.feed_id
ORDER BY i.published_at DESC NULLS LAST, i.retrieved_at DESC
LIMIT $1 OFFSET $2
`

type ListRecentParams struct {
	Limit  int32
	Offset int32
}

type ListRecentRow struct {
	ID          uuid.UUID
	FeedID      uuid.UUID
	FeedTitle   string
	Guid        sql.NullString
	Url         string
	Title       string
	Author      sql.NullString
	ContentHtml string
	ContentText string
	PublishedAt sql.NullTime
	RetrievedAt time.Time
}

func (q *Queries) ListRecent(ctx context.Context, arg ListRecentParams) ([]ListRecentRow, error) {
	rows, err := q.db.QueryContext(ctx, listRecent, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListRecentRow{}
	for rows.Next() {
		var i ListRecentRow
		if err := rows.Scan(
			&i.ID,
			&i.FeedID,
			&i.FeedTitle,
			&i.Guid,
			&i.Url,
			&i.Title,
			&i.Author,
			&i.ContentHtml,
			&i.ContentText,
			&i.PublishedAt,
			&i.RetrievedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertItem = `-- name: UpsertItem :one
WITH existing AS (
    SELECT i.id, i.content_hash
    FROM items i
    WHERE i.feed_id = $1
      AND (
          i.guid = $2
          OR ($2 IS NULL AND i.guid IS NULL AND i.url = $3)
      )
),
upsert AS (
    INSERT INTO items (
        feed_id,
        guid,
        url,
        title,
        author,
        content_html,
        content_text,
        published_at,
        retrieved_at,
        content_hash
    ) VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        COALESCE($9, now()),
        $10
    )
    ON CONFLICT (feed_id, COALESCE(guid, url)) DO UPDATE SET
        url = EXCLUDED.url,
        title = EXCLUDED.title,
        author = EXCLUDED.author,
        content_html = EXCLUDED.content_html,
        content_text = EXCLUDED.content_text,
        published_at = EXCLUDED.published_at,
        retrieved_at = EXCLUDED.retrieved_at,
        content_hash = EXCLUDED.content_hash
    RETURNING id,
              feed_id,
              guid,
              url,
              title,
              author,
              content_html,
              content_text,
              published_at,
              retrieved_at,
              content_hash,
              xmax = 0 AS inserted
)
SELECT u.id,
       u.feed_id,
       f.title AS feed_title,
       u.guid,
       u.url,
       u.title,
       u.author,
       u.content_html,
       u.content_text,
       u.published_at,
       u.retrieved_at,
       u.inserted,
       (u.inserted OR e.content_hash IS DISTINCT FROM u.content_hash) AS indexed
FROM upsert u
LEFT JOIN existing e ON e.id = u.id
JOIN feeds f ON f.id = u.feed_id
`

type UpsertItemParams struct {
	FeedID      uuid.UUID
	Guid        sql.NullString
	Url         string
	Title       string
	Author      sql.NullString
	ContentHtml string
	ContentText string
	PublishedAt sql.NullTime
	RetrievedAt interface{}
	ContentHash []byte
}

type UpsertItemRow struct {
	ID          uuid.UUID
	FeedID      uuid.UUID
	FeedTitle   string
	Guid        sql.NullString
	Url         string
	Title       string
	Author      sql.NullString
	ContentHtml string
	ContentText string
	PublishedAt sql.NullTime
	RetrievedAt time.Time
	Inserted    bool
	Indexed     sql.NullBool
}

func (q *Queries) UpsertItem(ctx context.Context, arg UpsertItemParams) (UpsertItemRow, error) {
	row := q.db.QueryRowContext(ctx, upsertItem,
		arg.FeedID,
		arg.Guid,
		arg.Url,
		arg.Title,
		arg.Author,
		arg.ContentHtml,
		arg.ContentText,
		arg.PublishedAt,
		arg.RetrievedAt,
		arg.ContentHash,
	)
	var i UpsertItemRow
	err := row.Scan(
		&i.ID,
		&i.FeedID,
		&i.FeedTitle,
		&i.Guid,
		&i.Url,
		&i.Title,
		&i.Author,
		&i.ContentHtml,
		&i.ContentText,
		&i.PublishedAt,
		&i.RetrievedAt,
		&i.Inserted,
		&i.Indexed,
	)
	return i, err
}
