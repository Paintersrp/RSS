// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: feeds.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const insertFeed = `-- name: InsertFeed :one
INSERT INTO feeds (url)
VALUES ($1)
ON CONFLICT (url) DO NOTHING
RETURNING id, url, title, etag, last_modified, last_crawled, active
`

func (q *Queries) InsertFeed(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, insertFeed, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Title,
		&i.Etag,
		&i.LastModified,
		&i.LastCrawled,
		&i.Active,
	)
	return i, err
}

const listFeeds = `-- name: ListFeeds :many
SELECT id, url, title, etag, last_modified, last_crawled, active
FROM feeds
WHERE active = $1
ORDER BY title ASC, url ASC
`

func (q *Queries) ListFeeds(ctx context.Context, active bool) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, listFeeds, active)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Feed{}
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Title,
			&i.Etag,
			&i.LastModified,
			&i.LastCrawled,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeedCrawlState = `-- name: UpdateFeedCrawlState :one
UPDATE feeds
SET etag = COALESCE($1, feeds.etag),
    last_modified = COALESCE($2, feeds.last_modified),
    last_crawled = COALESCE($3, last_crawled),
    title = COALESCE(NULLIF($4::text, ''), title)
WHERE id = $5
RETURNING id, url, title, etag, last_modified, last_crawled, active
`

type UpdateFeedCrawlStateParams struct {
	Etag         sql.NullString
	LastModified sql.NullString
	LastCrawled  sql.NullTime
	NewTitle     string
	ID           uuid.UUID
}

func (q *Queries) UpdateFeedCrawlState(ctx context.Context, arg UpdateFeedCrawlStateParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, updateFeedCrawlState,
		arg.Etag,
		arg.LastModified,
		arg.LastCrawled,
		arg.NewTitle,
		arg.ID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Title,
		&i.Etag,
		&i.LastModified,
		&i.LastCrawled,
		&i.Active,
	)
	return i, err
}
